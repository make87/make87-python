# generated by datamodel-codegen:
#   filename:  application_env_config.openapi.json
#   timestamp: 2025-05-22T18:54:31+00:00

from __future__ import annotations
from enum import Enum
from typing import Any, Dict, List, Optional, Union
from pydantic import BaseModel, ConfigDict, Field, RootModel, conint


class EndpointType(Enum):
    REQ = "REQ"


class EndpointConfig1(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    endpoint_key: str
    endpoint_name: str
    endpoint_type: EndpointType
    interface_name: Optional[str] = None
    provider_message_type: str
    requester_message_type: str


class EndpointType1(Enum):
    PRV = "PRV"


class EndpointConfig2(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    endpoint_key: str
    endpoint_name: str
    endpoint_type: EndpointType1
    interface_name: Optional[str] = None
    provider_message_type: str
    requester_message_type: str


class EndpointConfig(RootModel[Union[EndpointConfig1, EndpointConfig2]]):
    root: Union[EndpointConfig1, EndpointConfig2]


class GpioLineInfo(BaseModel):
    active_state: str
    consumer: Optional[str] = None
    direction: str
    line_offset: conint(ge=0)
    name: Optional[str] = None
    used: bool


class I2cDetectedDevice(BaseModel):
    address: str
    description: Optional[str] = None


class MappedURL(BaseModel):
    public_ip: Optional[str] = None
    public_port: Optional[conint(ge=0)] = None
    vpn_ip: str
    vpn_port: conint(ge=0)


class PeripheralType1(Enum):
    Camera = "Camera"


class PeripheralType2(Enum):
    RealSense = "RealSense"


class PeripheralType3(Enum):
    Speaker = "Speaker"


class PeripheralType4(Enum):
    Keyboard = "Keyboard"


class PeripheralType5(Enum):
    Mouse = "Mouse"


class PeripheralType6(Enum):
    Microphone = "Microphone"


class PeripheralType7(Enum):
    GPU = "GPU"


class PeripheralType8(Enum):
    I2C = "I2C"


class PeripheralType9(Enum):
    GPIO = "GPIO"


class PeripheralType10(Enum):
    ISP = "ISP"


class PeripheralType11(Enum):
    Codec = "Codec"


class PeripheralType12(Enum):
    Rendering = "Rendering"


class PeripheralType13(Enum):
    GenericDevice = "GenericDevice"


class PeripheralType14(BaseModel):
    Other: str


class PeripheralType(
    RootModel[
        Union[
            PeripheralType1,
            PeripheralType2,
            PeripheralType3,
            PeripheralType4,
            PeripheralType5,
            PeripheralType6,
            PeripheralType7,
            PeripheralType8,
            PeripheralType9,
            PeripheralType10,
            PeripheralType11,
            PeripheralType12,
            PeripheralType13,
            PeripheralType14,
        ]
    ]
):
    root: Union[
        PeripheralType1,
        PeripheralType2,
        PeripheralType3,
        PeripheralType4,
        PeripheralType5,
        PeripheralType6,
        PeripheralType7,
        PeripheralType8,
        PeripheralType9,
        PeripheralType10,
        PeripheralType11,
        PeripheralType12,
        PeripheralType13,
        PeripheralType14,
    ]


class ProtocolEnum(Enum):
    TCP = "TCP"
    UDP = "UDP"
    SCTP = "SCTP"
    HTTP = "HTTP"
    WS = "WS"
    SSH = "SSH"


class PublishMode(Enum):
    Ingress = "Ingress"
    Host = "Host"


class RealSenseCameraPeripheral(BaseModel):
    device_nodes: List[str]
    model: str
    name: str
    peripheral_type: PeripheralType
    serial_number: str


class RenderingPeripheral(BaseModel):
    device_nodes: List[str]
    max_performance: Optional[conint(ge=0)] = None
    name: str
    peripheral_type: PeripheralType
    supported_apis: List[str]


class Client(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    interface_name: Optional[str] = None
    key: str
    name: str
    spec: str


class ServiceConfig1(BaseModel):
    Client_1: Client = Field(..., alias="Client", description="The service is a client")


class Server(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    interface_name: Optional[str] = None
    key: str
    name: str
    spec: str


class ServiceConfig2(BaseModel):
    Server_1: Server = Field(..., alias="Server", description="The service is a server")


class ServiceConfig(RootModel[Union[ServiceConfig1, ServiceConfig2]]):
    root: Union[ServiceConfig1, ServiceConfig2]


class TopicType(Enum):
    PUB = "PUB"


class TopicConfig1(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    interface_name: Optional[str] = None
    message_type: str
    topic_key: str
    topic_name: str
    topic_type: TopicType


class TopicType1(Enum):
    SUB = "SUB"


class TopicConfig2(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    interface_name: Optional[str] = None
    message_type: str
    topic_key: str
    topic_name: str
    topic_type: TopicType1


class TopicConfig(RootModel[Union[TopicConfig1, TopicConfig2]]):
    root: Union[TopicConfig1, TopicConfig2]


class URLMapping(BaseModel):
    name_to_url: Dict[str, MappedURL]


class CameraPeripheral(BaseModel):
    camera_type: Optional[str] = None
    device_nodes: List[str]
    name: str
    peripheral_type: PeripheralType
    protocol: Optional[str] = None
    reference: str
    volumes: List[List]


class CodecPeripheral(BaseModel):
    device_nodes: List[str]
    name: str
    peripheral_type: PeripheralType
    supported_codecs: List[str]


class GenericDevicePeripheral(BaseModel):
    device_node: str
    name: str
    peripheral_type: PeripheralType


class GpioPeripheral(BaseModel):
    chip_name: str
    device_nodes: List[str]
    label: str
    lines: List[GpioLineInfo]
    num_lines: conint(ge=0)
    peripheral_type: PeripheralType


class GpuPeripheral(BaseModel):
    device_nodes: List[str]
    index: Optional[conint(ge=0)] = None
    model: str
    name: str
    peripheral_type: PeripheralType
    vram: Optional[conint(ge=0)] = None


class I2cPeripheral(BaseModel):
    bus_number: conint(ge=0)
    detected_devices: List[I2cDetectedDevice]
    device_nodes: List[str]
    name: str
    peripheral_type: PeripheralType


class IspPeripheral(BaseModel):
    device_nodes: List[str]
    name: str
    peripheral_type: PeripheralType
    supported_features: List[str]


class OtherPeripheral(BaseModel):
    device_nodes: List[str]
    name: str
    peripheral_type: PeripheralType
    reference: str


class Peripheral1(BaseModel):
    GPU: GpuPeripheral


class Peripheral2(BaseModel):
    I2C: I2cPeripheral


class Peripheral3(BaseModel):
    GPIO: GpioPeripheral


class Peripheral4(BaseModel):
    Camera: CameraPeripheral


class Peripheral5(BaseModel):
    RealSense: RealSenseCameraPeripheral


class Peripheral6(BaseModel):
    ISP: IspPeripheral


class Peripheral7(BaseModel):
    Codec: CodecPeripheral


class Peripheral8(BaseModel):
    Rendering: RenderingPeripheral


class Peripheral9(BaseModel):
    Speaker: OtherPeripheral


class Peripheral10(BaseModel):
    Keyboard: OtherPeripheral


class Peripheral11(BaseModel):
    Mouse: OtherPeripheral


class Peripheral12(BaseModel):
    GenericDevice: GenericDevicePeripheral


class Peripheral13(BaseModel):
    Other: OtherPeripheral


class Peripheral(
    RootModel[
        Union[
            Peripheral1,
            Peripheral2,
            Peripheral3,
            Peripheral4,
            Peripheral5,
            Peripheral6,
            Peripheral7,
            Peripheral8,
            Peripheral9,
            Peripheral10,
            Peripheral11,
            Peripheral12,
            Peripheral13,
        ]
    ]
):
    root: Union[
        Peripheral1,
        Peripheral2,
        Peripheral3,
        Peripheral4,
        Peripheral5,
        Peripheral6,
        Peripheral7,
        Peripheral8,
        Peripheral9,
        Peripheral10,
        Peripheral11,
        Peripheral12,
        Peripheral13,
    ]


class PortConfig(BaseModel):
    is_system_interface: Optional[bool] = None
    name: str
    protocol: Optional[ProtocolEnum] = None
    publish_mode: Optional[PublishMode] = None
    published_port: conint(ge=0) = Field(..., description="The port on the swarm hosts.")
    target_port: conint(ge=0) = Field(..., description="The port inside the container.")


class MountedPeripheral(BaseModel):
    name: str = Field(
        ...,
        description="The name of the peripheral. That is used by the application version to identify the peripheral",
    )
    peripheral: Peripheral


class MountedPeripherals(BaseModel):
    peripherals: List[MountedPeripheral]


class ApplicationEnvConfig(BaseModel):
    application_id: str
    application_name: str
    config: Any
    deployed_application_id: str
    deployed_application_name: str
    endpoints: List[EndpointConfig]
    entrypoint_name: Optional[str] = None
    git_branch: Optional[str] = None
    git_url: Optional[str] = None
    is_release_version: bool
    peripherals: MountedPeripherals
    port_config: List[PortConfig]
    public_ip: Optional[str] = None
    services: List[ServiceConfig]
    storage_access_key: Optional[str] = None
    storage_endpoint_url: Optional[str] = None
    storage_secret_key: Optional[str] = None
    storage_url: Optional[str] = None
    system_id: str
    topics: List[TopicConfig]
    url_mapping: URLMapping
    vpn_ip: str
