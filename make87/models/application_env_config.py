# generated by datamodel-codegen:
#   filename:  application_env_config.schema.json
#   timestamp: 2025-05-20T17:59:45+00:00

from __future__ import annotations
from typing import Dict, List, Literal, Optional, Union
from pydantic import BaseModel, ConfigDict, RootModel
from enum import Enum


class URLMapping(BaseModel):
    name_to_url: Dict[str, str]


class TopicPubConfig(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    topic_type: Literal["PUB"]
    topic_name: str
    topic_key: str
    message_type: str


class TopicSubConfig(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    topic_type: Literal["SUB"]
    topic_name: str
    topic_key: str
    message_type: str


class TopicConfig(RootModel[Union[TopicPubConfig, TopicSubConfig]]):
    root: Union[TopicPubConfig, TopicSubConfig]


class EndpointReqConfig(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    endpoint_type: Literal["REQ"]
    endpoint_name: str
    endpoint_key: str
    requester_message_type: str
    provider_message_type: str


class EndpointPrvConfig(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    endpoint_type: Literal["PRV"]
    endpoint_name: str
    endpoint_key: str
    requester_message_type: str
    provider_message_type: str


class EndpointConfig(RootModel[Union[EndpointReqConfig, EndpointPrvConfig]]):
    root: Union[EndpointReqConfig, EndpointPrvConfig]


class ServiceConfig1(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    name: str
    spec: str
    key: str


class ServiceConfig(RootModel[ServiceConfig1]):
    root: ServiceConfig1


class I2cDetectedDevice(BaseModel):
    address: str
    description: Optional[str] = None


class GpioLineInfo(BaseModel):
    line_offset: int
    name: Optional[str] = None
    consumer: Optional[str] = None
    direction: str
    active_state: str
    used: bool


class PeripheralType1(BaseModel):
    Other: str


class PeripheralType(RootModel[Union[str, PeripheralType1]]):
    root: Union[str, PeripheralType1]


class ProtocolEnum(Enum):
    TCP = "TCP"
    UDP = "UDP"
    SCTP = "SCTP"
    HTTP = "HTTP"
    WS = "WS"
    SSH = "SSH"


class PublishMode(Enum):
    Ingress = "Ingress"
    Host = "Host"


class TopicConfigs(BaseModel):
    topics: List[TopicConfig]


class EndpointConfigs(BaseModel):
    endpoints: List[EndpointConfig]


class ServiceConfigs(BaseModel):
    services: List[ServiceConfig]


class GpuPeripheral(BaseModel):
    peripheral_type: PeripheralType
    name: str
    model: str
    index: Optional[int] = None
    device_nodes: List[str]
    vram: Optional[int] = None


class I2cPeripheral(BaseModel):
    peripheral_type: PeripheralType
    bus_number: int
    name: str
    device_nodes: List[str]
    detected_devices: List[I2cDetectedDevice]


class GpioPeripheral(BaseModel):
    peripheral_type: PeripheralType
    chip_name: str
    label: str
    num_lines: int
    device_nodes: List[str]
    lines: List[GpioLineInfo]


class CameraPeripheral(BaseModel):
    reference: str
    peripheral_type: PeripheralType
    name: str
    device_nodes: List[str]
    volumes: List[List[str]]
    camera_type: Optional[str] = None
    protocol: Optional[str] = None


class RealSenseCameraPeripheral(BaseModel):
    peripheral_type: PeripheralType
    name: str
    device_nodes: List[str]
    serial_number: str
    model: str


class IspPeripheral(BaseModel):
    peripheral_type: PeripheralType
    name: str
    supported_features: List[str]
    device_nodes: List[str]


class CodecPeripheral(BaseModel):
    peripheral_type: PeripheralType
    name: str
    supported_codecs: List[str]
    device_nodes: List[str]


class RenderingPeripheral(BaseModel):
    peripheral_type: PeripheralType
    name: str
    supported_apis: List[str]
    max_performance: Optional[int] = None
    device_nodes: List[str]


class OtherPeripheral(BaseModel):
    reference: str
    peripheral_type: PeripheralType
    name: str
    device_nodes: List[str]


class GenericDevicePeripheral(BaseModel):
    peripheral_type: PeripheralType
    name: str
    device_node: str


class PortConfig(BaseModel):
    name: str
    protocol: ProtocolEnum
    target_port: int
    published_port: int
    publish_mode: PublishMode
    is_system_interface: bool


class GpuPeripheralModel(BaseModel):
    GPU: GpuPeripheral


class I2cPeripheralModel(BaseModel):
    I2C: I2cPeripheral


class GpioPeripheralModel(BaseModel):
    GPIO: GpioPeripheral


class CameraPeripheralModel(BaseModel):
    Camera: CameraPeripheral


class RealSenseCameraPeripheralModel(BaseModel):
    RealSense: RealSenseCameraPeripheral


class IspPeripheralModel(BaseModel):
    ISP: IspPeripheral


class CodecPeripheralModel(BaseModel):
    Codec: CodecPeripheral


class RenderingPeripheralModel(BaseModel):
    Rendering: RenderingPeripheral


class OtherPeripheralSpeaker(BaseModel):
    Speaker: OtherPeripheral


class OtherPeripheralKeyboard(BaseModel):
    Keyboard: OtherPeripheral


class OtherPeripheralMouse(BaseModel):
    Mouse: OtherPeripheral


class GenericDevicePeripheralModel(BaseModel):
    GenericDevice: GenericDevicePeripheral


class OtherPeripheral1(BaseModel):
    Other: OtherPeripheral


class Peripheral(
    RootModel[
        Union[
            GpuPeripheralModel,
            I2cPeripheralModel,
            GpioPeripheralModel,
            CameraPeripheralModel,
            RealSenseCameraPeripheralModel,
            IspPeripheralModel,
            CodecPeripheralModel,
            RenderingPeripheralModel,
            OtherPeripheralSpeaker,
            OtherPeripheralKeyboard,
            OtherPeripheralMouse,
            GenericDevicePeripheralModel,
            OtherPeripheral1,
        ]
    ]
):
    root: Union[
        GpuPeripheralModel,
        I2cPeripheralModel,
        GpioPeripheralModel,
        CameraPeripheralModel,
        RealSenseCameraPeripheralModel,
        IspPeripheralModel,
        CodecPeripheralModel,
        RenderingPeripheralModel,
        OtherPeripheralSpeaker,
        OtherPeripheralKeyboard,
        OtherPeripheralMouse,
        GenericDevicePeripheralModel,
        OtherPeripheral1,
    ]


class MountedPeripheral(BaseModel):
    name: str
    peripheral: Peripheral


class MountedPeripherals(BaseModel):
    peripherals: List[MountedPeripheral]


class ApplicationEnvConfig(BaseModel):
    topics: TopicConfigs
    endpoints: EndpointConfigs
    services: ServiceConfigs
    url_mapping: URLMapping
    peripherals: MountedPeripherals
    config: str
    entrypoint_name: Optional[str] = None
    deployed_application_id: str
    system_id: str
    deployed_application_name: str
    is_release_version: bool
    public_ip: Optional[str] = None
    make87_ip: str
    port_config: List[PortConfig]
    git_url: Optional[str] = None
    git_branch: Optional[str] = None
    application_id: str
    application_name: str
    storage_url: Optional[str] = None
    storage_endpoint_url: Optional[str] = None
    storage_access_key: Optional[str] = None
    storage_secret_key: Optional[str] = None
